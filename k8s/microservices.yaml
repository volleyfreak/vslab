apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: apache
  name: apache
spec:
  replicas: 1
  selector:
    matchLabels:
      run: apache
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: apache
    spec:
      containers:
        - image: docker.io/volleyfreak/vslab-proxy:latest
          name: apache
          ports:
            - containerPort: 80
          resources: {}
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: product
  name: product
spec:
  replicas: 1
  selector:
    matchLabels:
      run: product
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: product
    spec:
      containers:
        - image: docker.io/volleyfreak/vslab-product-service:latest
          name: product
          ports:
            - containerPort: 8082
          resources: {}
          env:
            - name: MYSQL_HOST
              value: "mysql"
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: category
  name: category
spec:
  replicas: 1
  selector:
    matchLabels:
      run: category
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: category
    spec:
      containers:
        - image: docker.io/volleyfreak/vslab-category-service:latest
          name: category
          ports:
            - containerPort: 8081
          resources: {}
          env:
            - name: MYSQL_HOST
              value: "mysql"
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: eshop
  name: eshop
spec:
  replicas: 1
  selector:
    matchLabels:
      run: eshop
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: eshop
    spec:
      containers:
        - image: docker.io/volleyfreak/vslab-legacy-shop:latest
          name: eshop
          ports:
            - containerPort: 8080
          resources: {}
          env:
            - name: MYSQL_HOST
              value: "mysql"
status: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: apache
  name: apache
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
  selector:
    run: apache
  type: LoadBalancer
status:
  loadBalancer: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: product
  name: product
spec:
  ports:
    - port: 8082
      protocol: TCP
      targetPort: 8082
  selector:
    run: product
  type: LoadBalancer
status:
  loadBalancer: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: category
  name: category
spec:
  ports:
    - port: 8081
      protocol: TCP
      targetPort: 8081
  selector:
    run: category
  type: LoadBalancer
status:
  loadBalancer: {}
---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: eshop
  name: eshop
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    run: eshop
  type: LoadBalancer
status:
  loadBalancer: {}

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mavogel/hska-vis-web-shop-db-image
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: c8de110f37300a53a971749
            - name: MYSQL_DATABASE
              value: webshop
            - name: MYSQL_USER
              value: webshopuser
            - name: MYSQL_PASSWORD
              value: 240b2c6d58ff2ce2f508b49f
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
            - name: mysql-initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
    CREATE TABLE category (
    	id INT NOT NULL AUTO_INCREMENT,
    	name VARCHAR(255) NOT NULL,
    	PRIMARY KEY (id)
    ) ENGINE=InnoDB;

    CREATE TABLE role (
    	id INT NOT NULL AUTO_INCREMENT,
    	level1 INT,
    	type VARCHAR(255),
    	PRIMARY KEY (id)
    ) ENGINE=InnoDB;

    CREATE TABLE product (
    	id INT NOT NULL AUTO_INCREMENT,
    	details VARCHAR(255),
    	name VARCHAR(255),
    	price DOUBLE,
    	category_id INT,
    	PRIMARY KEY (id)
    ) ENGINE=InnoDB;

    CREATE TABLE customer (
    	id INT NOT NULL AUTO_INCREMENT,
    	name VARCHAR(255) NOT NULL,
    	lastname VARCHAR(255) NOT NULL,
    	password VARCHAR(255) NOT NULL,
    	username VARCHAR(255) NOT NULL,
    	role INT NOT NULL,
    	PRIMARY KEY (id)
    ) ENGINE=InnoDB;

    CREATE UNIQUE INDEX UK_mufchskagt7e1w4ksmt9lum5l ON customer (username ASC);

    CREATE INDEX FK74aoh99stptslhotgf41fitt0 ON customer (role ASC);

    CREATE INDEX FK1mtsbur82frn64de7balymq9s ON product (category_id ASC);

    insert into `role` (`level1`, `type`) values(0, 'admin');
    insert into `role` (`level1`, `type`) values(1, 'user');

    insert into `customer` (`name`, `lastname`, `password`, `username`, `role`) values('admin', 'admin', 'admin', 'admin', 1);

    CREATE DATABASE IF NOT EXISTS `products`;
    CREATE DATABASE IF NOT EXISTS `categories`;
    CREATE USER 'user'@'%' IDENTIFIED BY 'user';
    GRANT ALL ON *.* TO 'user'@'%';

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi